from typing import Generator
from sqlalchemy.orm import Session
from fastapi import Depends, HTTPException, status, Request
from backend.db.models.database import SessionLocal

import logging

logger = logging.getLogger(__name__)


# ‚ñ∂Ô∏è Session DB avec log de cycle de vie
def get_db() -> Generator[Session, None, None]:
    """
    Fournit une session DB SQLAlchemy pour chaque requ√™te FastAPI.
    G√®re proprement le cycle (open ‚Üí yield ‚Üí close).
    Journalise l'ouverture et la fermeture si DEBUG activ√©.
    """
    db = SessionLocal()
    logger.debug("üìÇ [DB] Session ouverte")
    try:
        yield db
    finally:
        db.close()
        logger.debug("‚úÖ [DB] Session ferm√©e")


# ‚ñ∂Ô∏è Placeholder futur pour auth : utilisateur connect√©
def get_current_user(request: Request):
    """
    R√©cup√®re l'utilisateur connect√© √† partir du token, header ou session.
    √Ä connecter avec le syst√®me de s√©curit√© du projet (ex: JWT/OAuth2).
    """
    # Exemple future (√† impl√©menter dans `auth/jwt.py`) :
    # token = request.headers.get("Authorization")
    # return decode_token(token)
    raise HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Authentification requise"
    )


# ‚ñ∂Ô∏è V√©rifie que l'utilisateur a un r√¥le admin
def get_admin_user(current_user=Depends(get_current_user)):
    """
    V√©rifie que l'utilisateur est administrateur.
    √Ä brancher sur `current_user.role`, `permissions`, etc.
    """
    # Exemple future :
    # if current_user.role != "admin":
    #     raise HTTPException(status_code=403, detail="Acc√®s interdit (admin uniquement)")
    return current_user


# ‚ñ∂Ô∏è Settings applicatifs centralis√©s (optionnel)
def get_settings():
    """
    Fonction pour injecter les param√®tres globaux (env, config, secrets).
    Exemple : app name, email d‚Äôexp√©dition, activation debug, etc.
    """
    from backend.core.config import settings  # ‚Üê √† cr√©er dans ton projet
    return settings