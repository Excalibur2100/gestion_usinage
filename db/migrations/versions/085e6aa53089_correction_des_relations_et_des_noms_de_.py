"""Correction des relations et des noms de tables

Revision ID: 085e6aa53089
Revises: f8b6891a8586
Create Date: 2025-04-21 22:05:01.743239

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '085e6aa53089'
down_revision: Union[str, None] = 'f8b6891a8586'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('emplacements',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('nom', sa.String(length=100), nullable=False, comment="Nom de l'emplacement"),
    sa.Column('type', sa.String(length=50), nullable=False, comment="Type d'emplacement (ex: armoire, rack, bac)"),
    sa.Column('capacite', sa.Float(), nullable=False, comment="Capacité maximale de l'emplacement (en kg)"),
    sa.Column('occupation_actuelle', sa.Float(), nullable=False, comment="Occupation actuelle de l'emplacement (en kg)"),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('employes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('nom', sa.String(length=100), nullable=False, comment="Nom de l'employé"),
    sa.Column('prenom', sa.String(length=100), nullable=False, comment="Prénom de l'employé"),
    sa.Column('email', sa.String(length=150), nullable=True, comment="Adresse email de l'employé"),
    sa.Column('telephone', sa.String(length=20), nullable=True, comment="Numéro de téléphone de l'employé"),
    sa.Column('date_naissance', sa.Date(), nullable=False, comment="Date de naissance de l'employé"),
    sa.Column('numero_securite_sociale', sa.String(length=15), nullable=False, comment="Numéro de sécurité sociale de l'employé"),
    sa.Column('adresse', sa.String(length=255), nullable=True, comment="Adresse de l'employé"),
    sa.Column('salaire', sa.Float(), nullable=False, comment="Salaire brut mensuel de l'employé"),
    sa.Column('poste', sa.String(length=100), nullable=False, comment="Poste occupé par l'employé"),
    sa.Column('date_embauche', sa.Date(), nullable=False, comment="Date d'embauche de l'employé"),
    sa.Column('date_fin_contrat', sa.Date(), nullable=True, comment='Date de fin de contrat (si applicable)'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('numero_securite_sociale')
    )
    op.create_table('affectations_machines',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('machine_id', sa.Integer(), nullable=False, comment='ID de la machine associée'),
    sa.Column('utilisateur_id', sa.Integer(), nullable=False, comment="ID de l'utilisateur associé"),
    sa.Column('date_affectation', sa.DateTime(), nullable=False, comment="Date d'affectation"),
    sa.Column('tache', sa.Text(), nullable=True, comment="Tâche associée à l'affectation"),
    sa.Column('statut', sa.String(length=50), nullable=False, comment="Statut de l'affectation (Actif, Terminé)"),
    sa.ForeignKeyConstraint(['machine_id'], ['machines.id'], ),
    sa.ForeignKeyConstraint(['utilisateur_id'], ['utilisateurs.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('epis_utilisateur',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('utilisateur_id', sa.Integer(), nullable=True),
    sa.Column('nom_epi', sa.String(length=150), nullable=False),
    sa.Column('date_attribution', sa.String(length=50), nullable=True),
    sa.Column('date_retour', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['utilisateur_id'], ['utilisateurs.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('evaluations_fournisseurs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('fournisseur_id', sa.Integer(), nullable=False, comment='ID du fournisseur évalué'),
    sa.Column('date_evaluation', sa.DateTime(), nullable=False, comment="Date de l'évaluation"),
    sa.Column('note', sa.Float(), nullable=False, comment='Note attribuée au fournisseur (ex: 4.5 sur 5)'),
    sa.Column('commentaire', sa.Text(), nullable=True, comment='Commentaire ou retour sur le fournisseur'),
    sa.Column('critere', sa.String(length=100), nullable=False, comment="Critère d'évaluation (ex: qualité, délai, prix)"),
    sa.ForeignKeyConstraint(['fournisseur_id'], ['fournisseurs.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('maintenances',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('machine_id', sa.Integer(), nullable=False, comment='ID de la machine associée'),
    sa.Column('utilisateur_id', sa.Integer(), nullable=True, comment="ID de l'utilisateur responsable"),
    sa.Column('type_maintenance', sa.String(length=50), nullable=False, comment='Type de maintenance (préventive, corrective, prédictive)'),
    sa.Column('date_planifiee', sa.DateTime(), nullable=False, comment='Date planifiée pour la maintenance'),
    sa.Column('date_reelle', sa.DateTime(), nullable=True, comment='Date réelle de réalisation de la maintenance'),
    sa.Column('statut', sa.String(length=50), nullable=False, comment='Statut de la maintenance (planifiée, en cours, réalisée)'),
    sa.Column('description', sa.Text(), nullable=True, comment='Description de la maintenance'),
    sa.Column('remarques', sa.Text(), nullable=True, comment='Remarques supplémentaires'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment="Date de création de l'enregistrement"),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment="Date de dernière mise à jour de l'enregistrement"),
    sa.CheckConstraint("statut IN ('planifiée', 'en cours', 'réalisée')", name='check_statut_maintenance'),
    sa.CheckConstraint("type_maintenance IN ('préventive', 'corrective', 'prédictive')", name='check_type_maintenance'),
    sa.ForeignKeyConstraint(['machine_id'], ['machines.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['utilisateur_id'], ['utilisateurs.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('planning_employes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('utilisateur_id', sa.Integer(), nullable=False, comment="ID de l'utilisateur associé"),
    sa.Column('machine_id', sa.Integer(), nullable=True, comment='ID de la machine associée'),
    sa.Column('date_debut', sa.DateTime(), nullable=False, comment='Date de début de la tâche'),
    sa.Column('date_fin', sa.DateTime(), nullable=False, comment='Date de fin de la tâche'),
    sa.Column('tache', sa.Text(), nullable=False, comment='Description de la tâche'),
    sa.Column('statut', sa.String(length=50), nullable=False, comment='Statut de la tâche (Prévu, En cours, Terminé)'),
    sa.Column('affectation_auto', sa.Boolean(), nullable=True, comment="Indique si l'affectation est automatique"),
    sa.ForeignKeyConstraint(['machine_id'], ['machines.id'], ),
    sa.ForeignKeyConstraint(['utilisateur_id'], ['utilisateurs.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('qr_codes_objets',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('objet_type', sa.String(length=50), nullable=False, comment="Type de l'objet associé (ex: machine, pièce, outil)"),
    sa.Column('objet_id', sa.Integer(), nullable=False, comment="ID de l'objet associé"),
    sa.Column('contenu', sa.Text(), nullable=False, comment='Contenu encodé dans le QR code'),
    sa.Column('date_creation', sa.DateTime(), nullable=False, comment='Date de création du QR code'),
    sa.Column('date_expiration', sa.DateTime(), nullable=True, comment="Date d'expiration du QR code"),
    sa.Column('utilisateur_id', sa.Integer(), nullable=True, comment="ID de l'utilisateur ayant généré le QR code"),
    sa.ForeignKeyConstraint(['utilisateur_id'], ['utilisateurs.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('production',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('piece_id', sa.Integer(), nullable=False, comment='ID de la pièce produite'),
    sa.Column('machine_id', sa.Integer(), nullable=True, comment='ID de la machine utilisée pour la production'),
    sa.Column('employe_id', sa.Integer(), nullable=True, comment="ID de l'employé responsable de la production"),
    sa.Column('date_debut', sa.DateTime(), nullable=False, comment='Date de début de la production'),
    sa.Column('date_fin', sa.DateTime(), nullable=True, comment='Date de fin de la production'),
    sa.Column('statut', sa.String(length=50), nullable=False, comment='Statut de la production (en cours, terminée, annulée)'),
    sa.CheckConstraint("statut IN ('en cours', 'terminée', 'annulée')", name='check_statut_production'),
    sa.ForeignKeyConstraint(['employe_id'], ['employes.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['machine_id'], ['machines.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['piece_id'], ['pieces.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    comment='Table des productions'
    )
    op.create_index(op.f('ix_production_piece_id'), 'production', ['piece_id'], unique=False)
    op.create_table('programme_pieces',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('piece_id', sa.Integer(), nullable=False, comment='ID de la pièce associée'),
    sa.Column('nom_programme', sa.String(length=150), nullable=False, comment='Nom du programme'),
    sa.Column('fichier_path', sa.String(length=255), nullable=False, comment='Chemin du fichier sur disque'),
    sa.Column('postprocesseur_id', sa.Integer(), nullable=False, comment='ID du post-processeur associé'),
    sa.Column('date_import', sa.DateTime(), nullable=False, comment="Date d'importation du programme"),
    sa.ForeignKeyConstraint(['piece_id'], ['pieces.id'], ),
    sa.ForeignKeyConstraint(['postprocesseur_id'], ['postprocesseurs.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('planning_machines',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('machine_id', sa.Integer(), nullable=False, comment='ID de la machine associée'),
    sa.Column('date_debut', sa.DateTime(), nullable=False, comment="Date de début de l'opération"),
    sa.Column('date_fin', sa.DateTime(), nullable=False, comment="Date de fin de l'opération"),
    sa.Column('operation', sa.Text(), nullable=False, comment="Description de l'opération"),
    sa.Column('statut', sa.String(length=50), nullable=False, comment="Statut de l'opération (Prévu, En cours, Terminé)"),
    sa.Column('charge_estimee', sa.Float(), nullable=True, comment="Charge estimée pour l'opération (en heures)"),
    sa.Column('gamme_id', sa.Integer(), nullable=True, comment='ID de la gamme de production associée'),
    sa.Column('optimise_par_ia', sa.Boolean(), nullable=True, comment="Indique si l'opération est optimisée par IA"),
    sa.ForeignKeyConstraint(['gamme_id'], ['gammes_production.id'], ),
    sa.ForeignKeyConstraint(['machine_id'], ['machines.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('ligne_factures',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('facture_id', sa.Integer(), nullable=False, comment='ID de la facture associée'),
    sa.Column('description', sa.Text(), nullable=False, comment='Description de la ligne de facture'),
    sa.Column('quantite', sa.Integer(), nullable=False, comment='Quantité facturée'),
    sa.Column('prix_unitaire', sa.Float(), nullable=False, comment='Prix unitaire'),
    sa.Column('total', sa.Float(), nullable=False, comment='Total de la ligne (quantité * prix unitaire)'),
    sa.ForeignKeyConstraint(['facture_id'], ['factures.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('stat_rh')
    op.drop_table('historique_actions')
    op.drop_table('planning_machine')
    op.drop_table('affectation_machine')
    op.drop_table('evaluations_fournisseur')
    op.drop_table('programmes_piece')
    op.drop_table('planning_employe')
    op.drop_table('stat_production')
    op.drop_table('qhse')
    op.drop_table('epi_utilisateur')
    op.drop_table('maintenance')
    op.drop_table('stat_finance')
    op.drop_table('lignes_facture')
    op.drop_table('qr_codes')
    op.drop_table('documents_qhse')
    op.drop_table('charges_machine')
    op.add_column('analyse_fichiers', sa.Column('date_analyse', sa.DateTime(), nullable=False, comment="Date de l'analyse"))
    op.add_column('analyse_fichiers', sa.Column('machine_id', sa.Integer(), nullable=True, comment='ID de la machine associée (si applicable)'))
    op.add_column('analyse_fichiers', sa.Column('piece_id', sa.Integer(), nullable=True, comment='ID de la pièce associée (si applicable)'))
    op.add_column('analyse_fichiers', sa.Column('programme_id', sa.Integer(), nullable=True, comment='ID du programme associé (si applicable)'))
    op.alter_column('analyse_fichiers', 'type_fichier',
               existing_type=sa.VARCHAR(),
               nullable=False,
               comment='Type du fichier analysé (ex: CSV, JSON, XML)')
    op.alter_column('analyse_fichiers', 'contenu',
               existing_type=sa.TEXT(),
               nullable=False,
               comment="Contenu brut ou résultat de l'analyse du fichier")
    op.drop_index('ix_analyse_fichiers_id', table_name='analyse_fichiers')
    op.drop_index('ix_analyse_fichiers_type_fichier', table_name='analyse_fichiers')
    op.create_foreign_key(None, 'analyse_fichiers', 'pieces', ['piece_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(None, 'analyse_fichiers', 'programme_pieces', ['programme_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(None, 'analyse_fichiers', 'machines', ['machine_id'], ['id'], ondelete='SET NULL')
    op.add_column('audits_qualite', sa.Column('responsable_utilisateur_id', sa.Integer(), nullable=True))
    op.add_column('audits_qualite', sa.Column('date_audit', sa.DateTime(), nullable=False))
    op.add_column('audits_qualite', sa.Column('resultat', sa.String(length=50), nullable=False))
    op.add_column('audits_qualite', sa.Column('commentaire', sa.Text(), nullable=True))
    op.drop_constraint('audits_qualite_responsable_fkey', 'audits_qualite', type_='foreignkey')
    op.drop_constraint('audits_qualite_document_id_fkey', 'audits_qualite', type_='foreignkey')
    op.create_foreign_key(None, 'audits_qualite', 'utilisateurs', ['responsable_utilisateur_id'], ['id'])
    op.drop_column('audits_qualite', 'date')
    op.drop_column('audits_qualite', 'document_id')
    op.drop_column('audits_qualite', 'responsable')
    op.drop_column('audits_qualite', 'remarques')
    op.drop_column('audits_qualite', 'statut')
    op.add_column('commande_pieces', sa.Column('prix_unitaire', sa.Float(), nullable=False, comment='Prix unitaire de la pièce'))
    op.alter_column('commande_pieces', 'commande_id',
               existing_type=sa.INTEGER(),
               comment='ID de la commande associée',
               existing_nullable=False)
    op.alter_column('commande_pieces', 'piece_id',
               existing_type=sa.INTEGER(),
               comment='ID de la pièce associée',
               existing_nullable=False)
    op.alter_column('commande_pieces', 'quantite',
               existing_type=sa.INTEGER(),
               comment='Quantité commandée',
               existing_nullable=False)
    op.add_column('commandes', sa.Column('devis_id', sa.Integer(), nullable=True, comment='ID du devis associé'))
    op.add_column('commandes', sa.Column('date_validation', sa.DateTime(), nullable=False, comment='Date de validation de la commande'))
    op.add_column('commandes', sa.Column('date_creation', sa.DateTime(), nullable=False, comment='Date de création de la commande'))
    op.alter_column('commandes', 'client_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               comment='ID du client associé')
    op.alter_column('commandes', 'statut',
               existing_type=sa.VARCHAR(length=50),
               nullable=False,
               comment='Statut de la commande (en cours, terminée, annulée)')
    op.create_foreign_key(None, 'commandes', 'devis', ['devis_id'], ['id'])
    op.drop_column('commandes', 'created_at')
    op.drop_column('commandes', 'bon_commande_client')
    op.drop_column('commandes', 'code_statut')
    op.drop_column('commandes', 'forcer_creation')
    op.drop_column('commandes', 'updated_at')
    op.drop_column('commandes', 'date_commande')
    op.alter_column('controle_piece', 'piece_id',
               existing_type=sa.INTEGER(),
               comment='ID de la pièce contrôlée',
               existing_nullable=False)
    op.alter_column('controle_piece', 'instrument_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               comment="ID de l'instrument utilisé pour le contrôle")
    op.alter_column('controle_piece', 'resultat',
               existing_type=sa.VARCHAR(length=100),
               comment='Résultat du contrôle (ex: conforme, non conforme)',
               existing_nullable=False)
    op.alter_column('controle_piece', 'date_controle',
               existing_type=postgresql.TIMESTAMP(),
               comment='Date et heure du contrôle',
               existing_nullable=False)
    op.alter_column('controle_piece', 'remarque',
               existing_type=sa.TEXT(),
               comment='Remarques ou observations sur le contrôle',
               existing_nullable=True)
    op.drop_constraint('controle_piece_piece_id_fkey', 'controle_piece', type_='foreignkey')
    op.drop_constraint('controle_piece_instrument_id_fkey', 'controle_piece', type_='foreignkey')
    op.create_foreign_key(None, 'controle_piece', 'instruments_controle', ['instrument_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(None, 'controle_piece', 'pieces', ['piece_id'], ['id'], ondelete='CASCADE')
    op.add_column('controle_robot', sa.Column('remarque', sa.Text(), nullable=True, comment="Remarques ou observations sur l'action effectuée"))
    op.alter_column('controle_robot', 'robot_id',
               existing_type=sa.INTEGER(),
               comment='ID du robot contrôlé',
               existing_nullable=False)
    op.alter_column('controle_robot', 'action',
               existing_type=sa.VARCHAR(),
               comment='Action effectuée par le robot (ex: soudage, assemblage)',
               existing_nullable=False)
    op.alter_column('controle_robot', 'statut',
               existing_type=sa.VARCHAR(),
               comment="Statut de l'action (ex: réussie, échouée, en cours)",
               existing_nullable=True)
    op.alter_column('controle_robot', 'date_execution',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               comment="Date et heure d'exécution de l'action")
    op.drop_index('ix_controle_robot_id', table_name='controle_robot')
    op.drop_constraint('controle_robot_robot_id_fkey', 'controle_robot', type_='foreignkey')
    op.create_foreign_key(None, 'controle_robot', 'robotique', ['robot_id'], ['id'], ondelete='CASCADE')
    op.add_column('devis', sa.Column('date_creation', sa.DateTime(), nullable=True, comment='Date de création du devis'))
    op.add_column('devis', sa.Column('date_livraison_souhaitee', sa.DateTime(), nullable=True, comment='Date de livraison souhaitée'))
    op.alter_column('devis', 'client_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               comment='ID du client associé')
    op.alter_column('devis', 'montant_total',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False,
               comment='Montant total du devis')
    op.alter_column('devis', 'statut',
               existing_type=sa.VARCHAR(length=50),
               nullable=False,
               comment='Statut du devis (brouillon, validé, annulé)')
    op.drop_column('devis', 'scenarios')
    op.drop_column('devis', 'date_devis')
    op.add_column('documents_qualite', sa.Column('contenu', sa.Text(), nullable=False, comment='Contenu du document'))
    op.add_column('documents_qualite', sa.Column('date_creation', sa.DateTime(), nullable=False, comment='Date de création du document'))
    op.add_column('documents_qualite', sa.Column('auteur', sa.String(length=100), nullable=True, comment='Auteur du document'))
    op.alter_column('documents_qualite', 'titre',
               existing_type=sa.VARCHAR(length=150),
               type_=sa.String(length=255),
               comment='Titre du document',
               existing_nullable=False)
    op.drop_column('documents_qualite', 'actif')
    op.drop_column('documents_qualite', 'fichier_path')
    op.drop_column('documents_qualite', 'categorie')
    op.drop_column('documents_qualite', 'date_ajout')
    op.drop_column('documents_qualite', 'reference_norme')
    op.drop_column('documents_qualite', 'version')
    op.drop_column('documents_qualite', 'type_document')
    op.add_column('documents_reglementaires', sa.Column('nom', sa.String(length=150), nullable=False, comment='Nom du document réglementaire'))
    op.add_column('documents_reglementaires', sa.Column('chemin_fichier', sa.String(length=255), nullable=False, comment='Chemin du fichier sur le disque'))
    op.add_column('documents_reglementaires', sa.Column('date_creation', sa.DateTime(), nullable=False, comment='Date de création du document'))
    op.add_column('documents_reglementaires', sa.Column('actif', sa.String(length=50), nullable=False, comment='Statut du document (actif, archivé)'))
    op.alter_column('documents_reglementaires', 'type_document',
               existing_type=sa.VARCHAR(length=100),
               comment='Type de document (ex: certificat, norme, procédure)',
               existing_nullable=False)
    op.alter_column('documents_reglementaires', 'description',
               existing_type=sa.TEXT(),
               comment='Description ou remarques sur le document',
               existing_nullable=True)
    op.drop_constraint('documents_reglementaires_utilisateur_id_fkey', 'documents_reglementaires', type_='foreignkey')
    op.drop_column('documents_reglementaires', 'utilisateur_id')
    op.drop_column('documents_reglementaires', 'conforme')
    op.drop_column('documents_reglementaires', 'norme_associee')
    op.drop_column('documents_reglementaires', 'categorie')
    op.drop_column('documents_reglementaires', 'valide_jusquau')
    op.drop_column('documents_reglementaires', 'date_edition')
    op.drop_column('documents_reglementaires', 'titre')
    op.drop_column('documents_reglementaires', 'fichier_stocke')
    op.add_column('documents_rh', sa.Column('nom_document', sa.String(length=150), nullable=False))
    op.add_column('documents_rh', sa.Column('date_creation', sa.DateTime(), nullable=False))
    op.add_column('documents_rh', sa.Column('date_expiration', sa.DateTime(), nullable=True))
    op.add_column('documents_rh', sa.Column('fichier', sa.String(length=255), nullable=True))
    op.add_column('documents_rh', sa.Column('commentaire', sa.Text(), nullable=True))
    op.alter_column('documents_rh', 'type_document',
               existing_type=sa.VARCHAR(length=100),
               nullable=False)
    op.drop_column('documents_rh', 'date_ajout')
    op.drop_column('documents_rh', 'chemin_fichier')
    op.add_column('droits_acces', sa.Column('droit_id', sa.Integer(), nullable=True))
    op.create_foreign_key(None, 'droits_acces', 'droits', ['droit_id'], ['id'])
    op.drop_column('droits_acces', 'peut_supprimer')
    op.drop_column('droits_acces', 'peut_creer')
    op.drop_column('droits_acces', 'acces_total')
    op.drop_column('droits_acces', 'peut_modifier')
    op.drop_column('droits_acces', 'module')
    op.drop_column('droits_acces', 'peut_lire')
    op.add_column('epi', sa.Column('description', sa.Text(), nullable=True, comment="Description de l'EPI"))
    op.add_column('epi', sa.Column('categorie', sa.String(length=50), nullable=False, comment="Catégorie de l'EPI"))
    op.alter_column('epi', 'nom',
               existing_type=sa.VARCHAR(length=100),
               comment="Nom de l'EPI",
               existing_nullable=False)
    op.drop_column('epi', 'stock')
    op.drop_column('epi', 'seuil_alerte')
    op.alter_column('factures', 'commande_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               comment='ID de la commande associée')
    op.alter_column('factures', 'montant_total',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False,
               comment='Montant total de la facture')
    op.alter_column('factures', 'date_emission',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               comment="Date d'émission de la facture")
    op.alter_column('factures', 'statut',
               existing_type=sa.VARCHAR(length=50),
               comment='Statut de la facture (payée, impayée, annulée)',
               existing_nullable=False)
    op.drop_constraint('factures_numero_facture_key', 'factures', type_='unique')
    op.drop_constraint('factures_valide_par_fkey', 'factures', type_='foreignkey')
    op.drop_constraint('factures_client_id_fkey', 'factures', type_='foreignkey')
    op.drop_column('factures', 'valide_par')
    op.drop_column('factures', 'created_at')
    op.drop_column('factures', 'numero_facture')
    op.drop_column('factures', 'date_echeance')
    op.drop_column('factures', 'observations')
    op.drop_column('factures', 'mode_generation')
    op.drop_column('factures', 'code_statut')
    op.drop_column('factures', 'client_id')
    op.drop_column('factures', 'updated_at')
    op.add_column('finance', sa.Column('date_transaction', sa.DateTime(), nullable=False, comment='Date de la transaction'))
    op.alter_column('finance', 'type_transaction',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=50),
               comment='Type de transaction (revenu, dépense)',
               existing_nullable=False)
    op.alter_column('finance', 'categorie',
               existing_type=sa.VARCHAR(length=100),
               comment='Catégorie de la transaction',
               existing_nullable=True)
    op.alter_column('finance', 'sous_categorie',
               existing_type=sa.VARCHAR(length=100),
               comment='Sous-catégorie de la transaction',
               existing_nullable=True)
    op.alter_column('finance', 'montant',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment='Montant de la transaction',
               existing_nullable=False)
    op.alter_column('finance', 'devise',
               existing_type=sa.VARCHAR(length=10),
               comment='Devise utilisée',
               existing_nullable=False)
    op.alter_column('finance', 'description',
               existing_type=sa.TEXT(),
               comment='Description de la transaction',
               existing_nullable=True)
    op.alter_column('finance', 'statut',
               existing_type=sa.VARCHAR(length=50),
               nullable=False,
               comment='Statut de la transaction (validé, rejeté, etc.)')
    op.alter_column('finance', 'moyen_paiement',
               existing_type=sa.VARCHAR(length=50),
               comment='Moyen de paiement utilisé',
               existing_nullable=True)
    op.alter_column('finance', 'reference_facture',
               existing_type=sa.VARCHAR(length=100),
               comment='Référence de la facture associée',
               existing_nullable=True)
    op.alter_column('finance', 'utilisateur_id',
               existing_type=sa.INTEGER(),
               comment="ID de l'utilisateur associé",
               existing_nullable=False)
    op.alter_column('finance', 'fournisseur_id',
               existing_type=sa.INTEGER(),
               comment='ID du fournisseur associé',
               existing_nullable=True)
    op.alter_column('finance', 'materiau_id',
               existing_type=sa.INTEGER(),
               comment='ID du matériau associé',
               existing_nullable=True)
    op.alter_column('finance', 'piece_id',
               existing_type=sa.INTEGER(),
               comment='ID de la pièce associée',
               existing_nullable=True)
    op.alter_column('finance', 'instrument_id',
               existing_type=sa.INTEGER(),
               comment="ID de l'instrument de contrôle associé",
               existing_nullable=True)
    op.alter_column('finance', 'outil_id',
               existing_type=sa.INTEGER(),
               comment="ID de l'outil associé",
               existing_nullable=True)
    op.alter_column('finance', 'machine_id',
               existing_type=sa.INTEGER(),
               comment='ID de la machine associée',
               existing_nullable=True)
    op.alter_column('finance', 'facture_id',
               existing_type=sa.INTEGER(),
               comment='ID de la facture associée',
               existing_nullable=True)
    op.alter_column('finance', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               comment='Date de création')
    op.alter_column('finance', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='Date de dernière mise à jour',
               existing_nullable=True)
    op.drop_column('finance', 'date')
    op.drop_column('finance', 'periode')
    op.drop_column('finance', 'code_statut')
    op.drop_column('finance', 'justificatif')
    op.drop_column('finance', 'type_justificatif')
    op.add_column('fournisseurs', sa.Column('date_creation', sa.DateTime(), nullable=False, comment='Date de création du fournisseur'))
    op.alter_column('fournisseurs', 'nom',
               existing_type=sa.VARCHAR(length=100),
               comment='Nom du fournisseur',
               existing_nullable=False)
    op.alter_column('fournisseurs', 'contact',
               existing_type=sa.VARCHAR(length=100),
               comment='Contact principal du fournisseur',
               existing_nullable=True)
    op.alter_column('fournisseurs', 'email',
               existing_type=sa.VARCHAR(length=150),
               comment='Email du fournisseur',
               existing_nullable=True)
    op.alter_column('fournisseurs', 'telephone',
               existing_type=sa.VARCHAR(length=50),
               comment='Téléphone du fournisseur',
               existing_nullable=True)
    op.alter_column('fournisseurs', 'adresse',
               existing_type=sa.VARCHAR(length=255),
               comment='Adresse du fournisseur',
               existing_nullable=True)
    op.alter_column('fournisseurs', 'tva',
               existing_type=sa.VARCHAR(length=50),
               comment='Numéro de TVA du fournisseur',
               existing_nullable=True)
    op.alter_column('fournisseurs', 'site_web',
               existing_type=sa.VARCHAR(length=255),
               comment='Site web du fournisseur',
               existing_nullable=True)
    op.alter_column('fournisseurs', 'catalogue_interactif',
               existing_type=sa.VARCHAR(length=255),
               comment='URL ou fichier PDF du catalogue interactif',
               existing_nullable=True)
    op.add_column('gammes_production', sa.Column('temps_estime', sa.Float(), nullable=False, comment="Temps estimé pour l'opération (en heures)"))
    op.alter_column('gammes_production', 'piece_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               comment='ID de la pièce associée')
    op.alter_column('gammes_production', 'machine_id',
               existing_type=sa.INTEGER(),
               comment='ID de la machine associée',
               existing_nullable=True)
    op.alter_column('gammes_production', 'operation',
               existing_type=sa.VARCHAR(length=100),
               nullable=False,
               comment="Nom de l'opération")
    op.drop_constraint('gammes_production_materiau_id_fkey', 'gammes_production', type_='foreignkey')
    op.drop_constraint('gammes_production_programme_id_fkey', 'gammes_production', type_='foreignkey')
    op.drop_constraint('gammes_production_outil_id_fkey', 'gammes_production', type_='foreignkey')
    op.drop_column('gammes_production', 'ordre')
    op.drop_column('gammes_production', 'temps_reel')
    op.drop_column('gammes_production', 'outil_id')
    op.drop_column('gammes_production', 'nombre_debits')
    op.drop_column('gammes_production', 'statut')
    op.drop_column('gammes_production', 'programme_id')
    op.drop_column('gammes_production', 'temps_prevu')
    op.drop_column('gammes_production', 'longueur_debit')
    op.drop_column('gammes_production', 'materiau_id')
    op.drop_column('gammes_production', 'moyen_controle')
    op.add_column('gestion_acces', sa.Column('niveau_acces', sa.String(length=50), nullable=True))
    op.drop_column('gestion_acces', 'peut_supprimer')
    op.drop_column('gestion_acces', 'peut_valider')
    op.drop_column('gestion_acces', 'peut_ecrire')
    op.drop_column('gestion_acces', 'module')
    op.drop_column('gestion_acces', 'peut_lire')
    op.add_column('ia_logs', sa.Column('date_execution', sa.DateTime(), nullable=False, comment="Date et heure de l'exécution de l'IA"))
    op.add_column('ia_logs', sa.Column('module', sa.String(length=100), nullable=False, comment='Nom du module ou composant IA'))
    op.add_column('ia_logs', sa.Column('resultat', sa.Text(), nullable=True, comment="Résultat ou sortie de l'IA"))
    op.add_column('ia_logs', sa.Column('score_confiance', sa.Float(), nullable=True, comment='Score de confiance associé à la décision'))
    op.add_column('ia_logs', sa.Column('utilisateur_id', sa.Integer(), nullable=True, comment="ID de l'utilisateur associé à l'action (si applicable)"))
    op.alter_column('ia_logs', 'action',
               existing_type=sa.VARCHAR(length=255),
               comment="Action ou décision prise par l'IA",
               existing_nullable=False)
    op.create_index('idx_date_execution', 'ia_logs', ['date_execution'], unique=False)
    op.create_index('idx_module', 'ia_logs', ['module'], unique=False)
    op.create_foreign_key(None, 'ia_logs', 'utilisateurs', ['utilisateur_id'], ['id'], ondelete='SET NULL')
    op.drop_column('ia_logs', 'timestamp')
    op.drop_column('ia_logs', 'details')
    op.add_column('instruments_controle', sa.Column('date_calibration', sa.DateTime(), nullable=False, comment='Date de calibration'))
    op.add_column('instruments_controle', sa.Column('statut', sa.String(length=50), nullable=False, comment="Statut de l'instrument (conforme, non conforme)"))
    op.add_column('instruments_controle', sa.Column('emplacement_id', sa.Integer(), nullable=True, comment="ID de l'emplacement associé"))
    op.alter_column('instruments_controle', 'nom',
               existing_type=sa.VARCHAR(length=100),
               comment="Nom de l'instrument",
               existing_nullable=False)
    op.alter_column('instruments_controle', 'type_instrument',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=50),
               comment="Type d'instrument (pied à coulisse, micromètre, etc.)",
               existing_nullable=False)
    op.alter_column('instruments_controle', 'numero_serie',
               existing_type=sa.VARCHAR(length=100),
               comment="Numéro de série de l'instrument",
               existing_nullable=False)
    op.alter_column('instruments_controle', 'date_prochaine_calibration',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               comment='Date de la prochaine calibration')
    op.create_foreign_key(None, 'instruments_controle', 'emplacements', ['emplacement_id'], ['id'])
    op.drop_column('instruments_controle', 'conforme_qhse')
    op.drop_column('instruments_controle', 'en_service')
    op.drop_column('instruments_controle', 'date_calibrage')
    op.alter_column('machine_outil', 'machine_id',
               existing_type=sa.INTEGER(),
               comment='ID de la machine associée',
               existing_nullable=False)
    op.alter_column('machine_outil', 'outil_id',
               existing_type=sa.INTEGER(),
               comment="ID de l'outil associé",
               existing_nullable=False)
    op.drop_constraint('machine_outil_machine_id_fkey', 'machine_outil', type_='foreignkey')
    op.drop_constraint('machine_outil_outil_id_fkey', 'machine_outil', type_='foreignkey')
    op.create_foreign_key(None, 'machine_outil', 'machines', ['machine_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'machine_outil', 'outils', ['outil_id'], ['id'], ondelete='CASCADE')
    op.add_column('machines', sa.Column('type_machine', sa.String(length=50), nullable=False, comment='Type de la machine (ex: CNC, imprimante 3D)'))
    op.add_column('machines', sa.Column('created_at', sa.DateTime(), nullable=False, comment='Date de création de la machine'))
    op.add_column('machines', sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Date de dernière mise à jour de la machine'))
    op.alter_column('machines', 'nom',
               existing_type=sa.VARCHAR(length=100),
               comment='Nom unique de la machine',
               existing_nullable=False)
    op.alter_column('machines', 'vitesse_max',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment='Vitesse maximale de la machine',
               existing_nullable=True)
    op.alter_column('machines', 'puissance',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment='Puissance de la machine (en kW)',
               existing_nullable=True)
    op.alter_column('machines', 'nb_axes',
               existing_type=sa.INTEGER(),
               comment="Nombre d'axes de la machine",
               existing_nullable=True)
    op.drop_index('ix_machines_id', table_name='machines')
    op.create_index(op.f('ix_machines_nom'), 'machines', ['nom'], unique=True)
    op.create_index(op.f('ix_machines_type_machine'), 'machines', ['type_machine'], unique=False)
    op.drop_column('machines', 'logiciel_fao')
    op.drop_column('machines', 'axe_z_max')
    op.drop_column('machines', 'axe_x_max')
    op.drop_column('machines', 'type')
    op.drop_column('machines', 'axe_y_max')
    op.drop_column('machines', 'temperature_max')
    op.drop_column('machines', 'commande_numerique')
    op.drop_column('machines', 'vibration_max')
    op.add_column('materiaux', sa.Column('certificat', sa.String(length=255), nullable=True, comment='Certificat du matériau (chemin ou numéro)'))
    op.add_column('materiaux', sa.Column('emplacement_id', sa.Integer(), nullable=True, comment="ID de l'emplacement associé"))
    op.alter_column('materiaux', 'nom',
               existing_type=sa.VARCHAR(length=100),
               comment='Nom du matériau',
               existing_nullable=False)
    op.alter_column('materiaux', 'stock',
               existing_type=sa.INTEGER(),
               type_=sa.Float(),
               nullable=False,
               comment='Quantité en stock (en kg)')
    op.alter_column('materiaux', 'fournisseur_id',
               existing_type=sa.INTEGER(),
               comment='ID du fournisseur associé',
               existing_nullable=True)
    op.alter_column('materiaux', 'est_aeronautique',
               existing_type=sa.BOOLEAN(),
               comment="Indique si le matériau est certifié pour l'aéronautique",
               existing_nullable=True)
    op.create_foreign_key(None, 'materiaux', 'emplacements', ['emplacement_id'], ['id'])
    op.add_column('metrics_machine', sa.Column('charge', sa.Float(), nullable=True, comment='Charge de la machine (en %)'))
    op.alter_column('metrics_machine', 'machine_id',
               existing_type=sa.INTEGER(),
               comment='ID de la machine associée',
               existing_nullable=False)
    op.alter_column('metrics_machine', 'timestamp',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               comment='Horodatage des métriques')
    op.alter_column('metrics_machine', 'temperature',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True,
               comment='Température de la machine (en °C)')
    op.alter_column('metrics_machine', 'vibration',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True,
               comment='Niveau de vibration de la machine')
    op.drop_index('ix_metrics_machine_id', table_name='metrics_machine')
    op.create_index(op.f('ix_metrics_machine_machine_id'), 'metrics_machine', ['machine_id'], unique=False)
    op.create_index(op.f('ix_metrics_machine_timestamp'), 'metrics_machine', ['timestamp'], unique=False)
    op.add_column('outils', sa.Column('etat', sa.String(length=50), nullable=False, comment="État de l'outil (neuf, utilisé, cassé)"))
    op.add_column('outils', sa.Column('rayon', sa.Float(), nullable=True, comment='Rayon de la plaquette (en mm)'))
    op.add_column('outils', sa.Column('emplacement_id', sa.Integer(), nullable=True, comment="ID de l'emplacement associé"))
    op.alter_column('outils', 'nom',
               existing_type=sa.VARCHAR(length=100),
               nullable=False,
               comment="Nom de l'outil")
    op.alter_column('outils', 'type',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=50),
               nullable=False,
               comment="Type de l'outil (ex: fraise, foret)")
    op.alter_column('outils', 'stock',
               existing_type=sa.INTEGER(),
               nullable=False,
               comment='Quantité en stock')
    op.alter_column('outils', 'diametre',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment="Diamètre de l'outil (en mm)",
               existing_nullable=True)
    op.alter_column('outils', 'longueur',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment="Longueur de l'outil (en mm)",
               existing_nullable=True)
    op.alter_column('outils', 'fournisseur_id',
               existing_type=sa.INTEGER(),
               comment='ID du fournisseur associé',
               existing_nullable=True)
    op.create_foreign_key(None, 'outils', 'emplacements', ['emplacement_id'], ['id'])
    op.drop_column('outils', 'en_stock')
    op.drop_column('outils', 'catalogue_url')
    op.add_column('pieces', sa.Column('date_creation', sa.DateTime(), nullable=False, comment='Date de création de la pièce'))
    op.add_column('pieces', sa.Column('client_id', sa.Integer(), nullable=True, comment='ID du client associé'))
    op.alter_column('pieces', 'nom',
               existing_type=sa.VARCHAR(length=100),
               comment='Nom de la pièce (max 100 caractères)',
               existing_nullable=False)
    op.alter_column('pieces', 'description',
               existing_type=sa.TEXT(),
               comment='Description de la pièce (optionnelle)',
               existing_nullable=True)
    op.create_index(op.f('ix_pieces_client_id'), 'pieces', ['client_id'], unique=False)
    op.create_foreign_key(None, 'pieces', 'clients', ['client_id'], ['id'])
    op.drop_column('pieces', 'numero_plan')
    op.alter_column('pointages', 'utilisateur_id',
               existing_type=sa.INTEGER(),
               comment="ID de l'utilisateur associé",
               existing_nullable=False)
    op.alter_column('pointages', 'machine_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               comment='ID de la machine associée')
    op.alter_column('pointages', 'gamme_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               comment='ID de la gamme de production associée')
    op.alter_column('pointages', 'date_pointage',
               existing_type=postgresql.TIMESTAMP(),
               comment='Date du pointage',
               existing_nullable=False)
    op.alter_column('pointages', 'heure_debut',
               existing_type=postgresql.TIMESTAMP(),
               comment='Heure de début',
               existing_nullable=False)
    op.alter_column('pointages', 'heure_fin',
               existing_type=postgresql.TIMESTAMP(),
               comment='Heure de fin',
               existing_nullable=True)
    op.alter_column('pointages', 'duree_effective',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment='Durée effective (en heures)',
               existing_nullable=True)
    op.alter_column('pointages', 'remarques',
               existing_type=sa.TEXT(),
               comment='Remarques sur le pointage',
               existing_nullable=True)
    op.add_column('postprocesseurs', sa.Column('description', sa.Text(), nullable=True, comment='Description du postprocesseur'))
    op.add_column('postprocesseurs', sa.Column('version', sa.String(length=50), nullable=True, comment='Version du postprocesseur'))
    op.add_column('postprocesseurs', sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Date de dernière mise à jour du post-processeur'))
    op.alter_column('postprocesseurs', 'nom',
               existing_type=sa.VARCHAR(length=150),
               type_=sa.String(length=100),
               comment='Nom du postprocesseur',
               existing_nullable=False)
    op.alter_column('postprocesseurs', 'logiciel_fao',
               existing_type=sa.VARCHAR(length=100),
               comment='Logiciel FAO associé (ex: SolidCAM, TopSolid)',
               existing_nullable=False)
    op.alter_column('postprocesseurs', 'extension_sortie',
               existing_type=sa.VARCHAR(length=20),
               nullable=False,
               comment='Extension de fichier générée (ex: .nc, .txt)')
    op.alter_column('postprocesseurs', 'configuration',
               existing_type=sa.TEXT(),
               comment='Configuration brute du post-processeur (JSON ou texte)',
               existing_nullable=True)
    op.alter_column('postprocesseurs', 'machine_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               comment='ID de la machine associée')
    op.alter_column('postprocesseurs', 'date_creation',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               comment='Date de création du post-processeur')
    op.drop_constraint('postprocesseurs_machine_id_fkey', 'postprocesseurs', type_='foreignkey')
    op.create_foreign_key(None, 'postprocesseurs', 'machines', ['machine_id'], ['id'], ondelete='CASCADE')
    op.add_column('robotique', sa.Column('date_ajout', sa.DateTime(), nullable=False, comment="Date d'ajout du robot"))
    op.alter_column('robotique', 'nom_robot',
               existing_type=sa.VARCHAR(length=100),
               nullable=False,
               comment='Nom du robot')
    op.alter_column('robotique', 'fonction',
               existing_type=sa.VARCHAR(length=100),
               nullable=False,
               comment='Fonction du robot')
    op.alter_column('robotique', 'statut',
               existing_type=sa.VARCHAR(length=50),
               nullable=False,
               comment='Statut du robot (actif, inactif, etc.)')
    op.alter_column('robotique', 'affectation',
               existing_type=sa.VARCHAR(length=255),
               comment='Affectation du robot',
               existing_nullable=True)
    op.add_column('surveillance_cameras', sa.Column('ip_address', sa.String(length=50), nullable=False, comment='Adresse IP de la caméra'))
    op.add_column('surveillance_cameras', sa.Column('statut', sa.String(length=50), nullable=False, comment='Statut de la caméra (active, inactive, en maintenance)'))
    op.add_column('surveillance_cameras', sa.Column('date_installation', sa.DateTime(), nullable=False, comment="Date d'installation de la caméra"))
    op.add_column('surveillance_cameras', sa.Column('description', sa.Text(), nullable=True, comment='Description ou remarques sur la caméra'))
    op.add_column('surveillance_cameras', sa.Column('enregistrement_actif', sa.Boolean(), nullable=True, comment="Indique si l'enregistrement est actif"))
    op.alter_column('surveillance_cameras', 'nom',
               existing_type=sa.VARCHAR(),
               comment='Nom de la caméra',
               existing_nullable=False)
    op.alter_column('surveillance_cameras', 'emplacement',
               existing_type=sa.VARCHAR(),
               comment='Emplacement de la caméra',
               existing_nullable=False)
    op.drop_index('ix_surveillance_cameras_id', table_name='surveillance_cameras')
    op.create_unique_constraint(None, 'surveillance_cameras', ['ip_address'])
    op.drop_column('surveillance_cameras', 'actif')
    op.add_column('tracabilite', sa.Column('piece_id', sa.Integer(), nullable=False, comment='ID de la pièce tracée'))
    op.add_column('tracabilite', sa.Column('operation', sa.String(length=255), nullable=False, comment='Opération effectuée sur la pièce'))
    op.add_column('tracabilite', sa.Column('date_operation', sa.DateTime(), nullable=False, comment="Date de l'opération"))
    op.add_column('tracabilite', sa.Column('utilisateur_id', sa.Integer(), nullable=True, comment="ID de l'utilisateur ayant effectué l'opération"))
    op.alter_column('tracabilite', 'gamme_id',
               existing_type=sa.INTEGER(),
               comment='ID de la gamme de production',
               existing_nullable=True)
    op.alter_column('tracabilite', 'date',
               existing_type=postgresql.TIMESTAMP(),
               comment="Date de l'enregistrement",
               existing_nullable=True)
    op.alter_column('tracabilite', 'remarque',
               existing_type=sa.TEXT(),
               comment="Remarque associée à l'enregistrement",
               existing_nullable=True)
    op.create_foreign_key(None, 'tracabilite', 'pieces', ['piece_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'tracabilite', 'utilisateurs', ['utilisateur_id'], ['id'], ondelete='SET NULL')
    op.drop_constraint('utilisateurs_email_key', 'utilisateurs', type_='unique')
    op.create_index(op.f('ix_utilisateurs_email'), 'utilisateurs', ['email'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_utilisateurs_email'), table_name='utilisateurs')
    op.create_unique_constraint('utilisateurs_email_key', 'utilisateurs', ['email'])
    op.drop_constraint(None, 'tracabilite', type_='foreignkey')
    op.drop_constraint(None, 'tracabilite', type_='foreignkey')
    op.alter_column('tracabilite', 'remarque',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment="Remarque associée à l'enregistrement",
               existing_nullable=True)
    op.alter_column('tracabilite', 'date',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment="Date de l'enregistrement",
               existing_nullable=True)
    op.alter_column('tracabilite', 'gamme_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='ID de la gamme de production',
               existing_nullable=True)
    op.drop_column('tracabilite', 'utilisateur_id')
    op.drop_column('tracabilite', 'date_operation')
    op.drop_column('tracabilite', 'operation')
    op.drop_column('tracabilite', 'piece_id')
    op.add_column('surveillance_cameras', sa.Column('actif', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'surveillance_cameras', type_='unique')
    op.create_index('ix_surveillance_cameras_id', 'surveillance_cameras', ['id'], unique=False)
    op.alter_column('surveillance_cameras', 'emplacement',
               existing_type=sa.VARCHAR(),
               comment=None,
               existing_comment='Emplacement de la caméra',
               existing_nullable=False)
    op.alter_column('surveillance_cameras', 'nom',
               existing_type=sa.VARCHAR(),
               comment=None,
               existing_comment='Nom de la caméra',
               existing_nullable=False)
    op.drop_column('surveillance_cameras', 'enregistrement_actif')
    op.drop_column('surveillance_cameras', 'description')
    op.drop_column('surveillance_cameras', 'date_installation')
    op.drop_column('surveillance_cameras', 'statut')
    op.drop_column('surveillance_cameras', 'ip_address')
    op.alter_column('robotique', 'affectation',
               existing_type=sa.VARCHAR(length=255),
               comment=None,
               existing_comment='Affectation du robot',
               existing_nullable=True)
    op.alter_column('robotique', 'statut',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               comment=None,
               existing_comment='Statut du robot (actif, inactif, etc.)')
    op.alter_column('robotique', 'fonction',
               existing_type=sa.VARCHAR(length=100),
               nullable=True,
               comment=None,
               existing_comment='Fonction du robot')
    op.alter_column('robotique', 'nom_robot',
               existing_type=sa.VARCHAR(length=100),
               nullable=True,
               comment=None,
               existing_comment='Nom du robot')
    op.drop_column('robotique', 'date_ajout')
    op.drop_constraint(None, 'postprocesseurs', type_='foreignkey')
    op.create_foreign_key('postprocesseurs_machine_id_fkey', 'postprocesseurs', 'machines', ['machine_id'], ['id'])
    op.alter_column('postprocesseurs', 'date_creation',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               comment=None,
               existing_comment='Date de création du post-processeur')
    op.alter_column('postprocesseurs', 'machine_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               comment=None,
               existing_comment='ID de la machine associée')
    op.alter_column('postprocesseurs', 'configuration',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='Configuration brute du post-processeur (JSON ou texte)',
               existing_nullable=True)
    op.alter_column('postprocesseurs', 'extension_sortie',
               existing_type=sa.VARCHAR(length=20),
               nullable=True,
               comment=None,
               existing_comment='Extension de fichier générée (ex: .nc, .txt)')
    op.alter_column('postprocesseurs', 'logiciel_fao',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='Logiciel FAO associé (ex: SolidCAM, TopSolid)',
               existing_nullable=False)
    op.alter_column('postprocesseurs', 'nom',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=150),
               comment=None,
               existing_comment='Nom du postprocesseur',
               existing_nullable=False)
    op.drop_column('postprocesseurs', 'updated_at')
    op.drop_column('postprocesseurs', 'version')
    op.drop_column('postprocesseurs', 'description')
    op.alter_column('pointages', 'remarques',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='Remarques sur le pointage',
               existing_nullable=True)
    op.alter_column('pointages', 'duree_effective',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment=None,
               existing_comment='Durée effective (en heures)',
               existing_nullable=True)
    op.alter_column('pointages', 'heure_fin',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='Heure de fin',
               existing_nullable=True)
    op.alter_column('pointages', 'heure_debut',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='Heure de début',
               existing_nullable=False)
    op.alter_column('pointages', 'date_pointage',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='Date du pointage',
               existing_nullable=False)
    op.alter_column('pointages', 'gamme_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               comment=None,
               existing_comment='ID de la gamme de production associée')
    op.alter_column('pointages', 'machine_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               comment=None,
               existing_comment='ID de la machine associée')
    op.alter_column('pointages', 'utilisateur_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment="ID de l'utilisateur associé",
               existing_nullable=False)
    op.add_column('pieces', sa.Column('numero_plan', sa.VARCHAR(length=100), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'pieces', type_='foreignkey')
    op.drop_index(op.f('ix_pieces_client_id'), table_name='pieces')
    op.alter_column('pieces', 'description',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='Description de la pièce (optionnelle)',
               existing_nullable=True)
    op.alter_column('pieces', 'nom',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='Nom de la pièce (max 100 caractères)',
               existing_nullable=False)
    op.drop_column('pieces', 'client_id')
    op.drop_column('pieces', 'date_creation')
    op.add_column('outils', sa.Column('catalogue_url', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('outils', sa.Column('en_stock', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'outils', type_='foreignkey')
    op.alter_column('outils', 'fournisseur_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='ID du fournisseur associé',
               existing_nullable=True)
    op.alter_column('outils', 'longueur',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment=None,
               existing_comment="Longueur de l'outil (en mm)",
               existing_nullable=True)
    op.alter_column('outils', 'diametre',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment=None,
               existing_comment="Diamètre de l'outil (en mm)",
               existing_nullable=True)
    op.alter_column('outils', 'stock',
               existing_type=sa.INTEGER(),
               nullable=True,
               comment=None,
               existing_comment='Quantité en stock')
    op.alter_column('outils', 'type',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=100),
               nullable=True,
               comment=None,
               existing_comment="Type de l'outil (ex: fraise, foret)")
    op.alter_column('outils', 'nom',
               existing_type=sa.VARCHAR(length=100),
               nullable=True,
               comment=None,
               existing_comment="Nom de l'outil")
    op.drop_column('outils', 'emplacement_id')
    op.drop_column('outils', 'rayon')
    op.drop_column('outils', 'etat')
    op.drop_index(op.f('ix_metrics_machine_timestamp'), table_name='metrics_machine')
    op.drop_index(op.f('ix_metrics_machine_machine_id'), table_name='metrics_machine')
    op.create_index('ix_metrics_machine_id', 'metrics_machine', ['id'], unique=False)
    op.alter_column('metrics_machine', 'vibration',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False,
               comment=None,
               existing_comment='Niveau de vibration de la machine')
    op.alter_column('metrics_machine', 'temperature',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False,
               comment=None,
               existing_comment='Température de la machine (en °C)')
    op.alter_column('metrics_machine', 'timestamp',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               comment=None,
               existing_comment='Horodatage des métriques')
    op.alter_column('metrics_machine', 'machine_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='ID de la machine associée',
               existing_nullable=False)
    op.drop_column('metrics_machine', 'charge')
    op.drop_constraint(None, 'materiaux', type_='foreignkey')
    op.alter_column('materiaux', 'est_aeronautique',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment="Indique si le matériau est certifié pour l'aéronautique",
               existing_nullable=True)
    op.alter_column('materiaux', 'fournisseur_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='ID du fournisseur associé',
               existing_nullable=True)
    op.alter_column('materiaux', 'stock',
               existing_type=sa.Float(),
               type_=sa.INTEGER(),
               nullable=True,
               comment=None,
               existing_comment='Quantité en stock (en kg)')
    op.alter_column('materiaux', 'nom',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='Nom du matériau',
               existing_nullable=False)
    op.drop_column('materiaux', 'emplacement_id')
    op.drop_column('materiaux', 'certificat')
    op.add_column('machines', sa.Column('vibration_max', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('machines', sa.Column('commande_numerique', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('machines', sa.Column('temperature_max', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('machines', sa.Column('axe_y_max', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('machines', sa.Column('type', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('machines', sa.Column('axe_x_max', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('machines', sa.Column('axe_z_max', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('machines', sa.Column('logiciel_fao', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_machines_type_machine'), table_name='machines')
    op.drop_index(op.f('ix_machines_nom'), table_name='machines')
    op.create_index('ix_machines_id', 'machines', ['id'], unique=False)
    op.alter_column('machines', 'nb_axes',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment="Nombre d'axes de la machine",
               existing_nullable=True)
    op.alter_column('machines', 'puissance',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment=None,
               existing_comment='Puissance de la machine (en kW)',
               existing_nullable=True)
    op.alter_column('machines', 'vitesse_max',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment=None,
               existing_comment='Vitesse maximale de la machine',
               existing_nullable=True)
    op.alter_column('machines', 'nom',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='Nom unique de la machine',
               existing_nullable=False)
    op.drop_column('machines', 'updated_at')
    op.drop_column('machines', 'created_at')
    op.drop_column('machines', 'type_machine')
    op.drop_constraint(None, 'machine_outil', type_='foreignkey')
    op.drop_constraint(None, 'machine_outil', type_='foreignkey')
    op.create_foreign_key('machine_outil_outil_id_fkey', 'machine_outil', 'outils', ['outil_id'], ['id'])
    op.create_foreign_key('machine_outil_machine_id_fkey', 'machine_outil', 'machines', ['machine_id'], ['id'])
    op.alter_column('machine_outil', 'outil_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment="ID de l'outil associé",
               existing_nullable=False)
    op.alter_column('machine_outil', 'machine_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='ID de la machine associée',
               existing_nullable=False)
    op.add_column('instruments_controle', sa.Column('date_calibrage', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('instruments_controle', sa.Column('en_service', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('instruments_controle', sa.Column('conforme_qhse', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'instruments_controle', type_='foreignkey')
    op.alter_column('instruments_controle', 'date_prochaine_calibration',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               comment=None,
               existing_comment='Date de la prochaine calibration')
    op.alter_column('instruments_controle', 'numero_serie',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment="Numéro de série de l'instrument",
               existing_nullable=False)
    op.alter_column('instruments_controle', 'type_instrument',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=100),
               comment=None,
               existing_comment="Type d'instrument (pied à coulisse, micromètre, etc.)",
               existing_nullable=False)
    op.alter_column('instruments_controle', 'nom',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment="Nom de l'instrument",
               existing_nullable=False)
    op.drop_column('instruments_controle', 'emplacement_id')
    op.drop_column('instruments_controle', 'statut')
    op.drop_column('instruments_controle', 'date_calibration')
    op.add_column('ia_logs', sa.Column('details', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('ia_logs', sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'ia_logs', type_='foreignkey')
    op.drop_index('idx_module', table_name='ia_logs')
    op.drop_index('idx_date_execution', table_name='ia_logs')
    op.alter_column('ia_logs', 'action',
               existing_type=sa.VARCHAR(length=255),
               comment=None,
               existing_comment="Action ou décision prise par l'IA",
               existing_nullable=False)
    op.drop_column('ia_logs', 'utilisateur_id')
    op.drop_column('ia_logs', 'score_confiance')
    op.drop_column('ia_logs', 'resultat')
    op.drop_column('ia_logs', 'module')
    op.drop_column('ia_logs', 'date_execution')
    op.add_column('gestion_acces', sa.Column('peut_lire', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('gestion_acces', sa.Column('module', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('gestion_acces', sa.Column('peut_ecrire', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('gestion_acces', sa.Column('peut_valider', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('gestion_acces', sa.Column('peut_supprimer', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.drop_column('gestion_acces', 'niveau_acces')
    op.add_column('gammes_production', sa.Column('moyen_controle', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('gammes_production', sa.Column('materiau_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('gammes_production', sa.Column('longueur_debit', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('gammes_production', sa.Column('temps_prevu', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('gammes_production', sa.Column('programme_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('gammes_production', sa.Column('statut', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('gammes_production', sa.Column('nombre_debits', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('gammes_production', sa.Column('outil_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('gammes_production', sa.Column('temps_reel', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('gammes_production', sa.Column('ordre', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_foreign_key('gammes_production_outil_id_fkey', 'gammes_production', 'outils', ['outil_id'], ['id'])
    op.create_foreign_key('gammes_production_programme_id_fkey', 'gammes_production', 'programmes_piece', ['programme_id'], ['id'])
    op.create_foreign_key('gammes_production_materiau_id_fkey', 'gammes_production', 'materiaux', ['materiau_id'], ['id'])
    op.alter_column('gammes_production', 'operation',
               existing_type=sa.VARCHAR(length=100),
               nullable=True,
               comment=None,
               existing_comment="Nom de l'opération")
    op.alter_column('gammes_production', 'machine_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='ID de la machine associée',
               existing_nullable=True)
    op.alter_column('gammes_production', 'piece_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               comment=None,
               existing_comment='ID de la pièce associée')
    op.drop_column('gammes_production', 'temps_estime')
    op.alter_column('fournisseurs', 'catalogue_interactif',
               existing_type=sa.VARCHAR(length=255),
               comment=None,
               existing_comment='URL ou fichier PDF du catalogue interactif',
               existing_nullable=True)
    op.alter_column('fournisseurs', 'site_web',
               existing_type=sa.VARCHAR(length=255),
               comment=None,
               existing_comment='Site web du fournisseur',
               existing_nullable=True)
    op.alter_column('fournisseurs', 'tva',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='Numéro de TVA du fournisseur',
               existing_nullable=True)
    op.alter_column('fournisseurs', 'adresse',
               existing_type=sa.VARCHAR(length=255),
               comment=None,
               existing_comment='Adresse du fournisseur',
               existing_nullable=True)
    op.alter_column('fournisseurs', 'telephone',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='Téléphone du fournisseur',
               existing_nullable=True)
    op.alter_column('fournisseurs', 'email',
               existing_type=sa.VARCHAR(length=150),
               comment=None,
               existing_comment='Email du fournisseur',
               existing_nullable=True)
    op.alter_column('fournisseurs', 'contact',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='Contact principal du fournisseur',
               existing_nullable=True)
    op.alter_column('fournisseurs', 'nom',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='Nom du fournisseur',
               existing_nullable=False)
    op.drop_column('fournisseurs', 'date_creation')
    op.add_column('finance', sa.Column('type_justificatif', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('finance', sa.Column('justificatif', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('finance', sa.Column('code_statut', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
    op.add_column('finance', sa.Column('periode', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
    op.add_column('finance', sa.Column('date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.alter_column('finance', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='Date de dernière mise à jour',
               existing_nullable=True)
    op.alter_column('finance', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               comment=None,
               existing_comment='Date de création')
    op.alter_column('finance', 'facture_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='ID de la facture associée',
               existing_nullable=True)
    op.alter_column('finance', 'machine_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='ID de la machine associée',
               existing_nullable=True)
    op.alter_column('finance', 'outil_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment="ID de l'outil associé",
               existing_nullable=True)
    op.alter_column('finance', 'instrument_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment="ID de l'instrument de contrôle associé",
               existing_nullable=True)
    op.alter_column('finance', 'piece_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='ID de la pièce associée',
               existing_nullable=True)
    op.alter_column('finance', 'materiau_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='ID du matériau associé',
               existing_nullable=True)
    op.alter_column('finance', 'fournisseur_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='ID du fournisseur associé',
               existing_nullable=True)
    op.alter_column('finance', 'utilisateur_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment="ID de l'utilisateur associé",
               existing_nullable=False)
    op.alter_column('finance', 'reference_facture',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='Référence de la facture associée',
               existing_nullable=True)
    op.alter_column('finance', 'moyen_paiement',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='Moyen de paiement utilisé',
               existing_nullable=True)
    op.alter_column('finance', 'statut',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               comment=None,
               existing_comment='Statut de la transaction (validé, rejeté, etc.)')
    op.alter_column('finance', 'description',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='Description de la transaction',
               existing_nullable=True)
    op.alter_column('finance', 'devise',
               existing_type=sa.VARCHAR(length=10),
               comment=None,
               existing_comment='Devise utilisée',
               existing_nullable=False)
    op.alter_column('finance', 'montant',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment=None,
               existing_comment='Montant de la transaction',
               existing_nullable=False)
    op.alter_column('finance', 'sous_categorie',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='Sous-catégorie de la transaction',
               existing_nullable=True)
    op.alter_column('finance', 'categorie',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='Catégorie de la transaction',
               existing_nullable=True)
    op.alter_column('finance', 'type_transaction',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='Type de transaction (revenu, dépense)',
               existing_nullable=False)
    op.drop_column('finance', 'date_transaction')
    op.add_column('factures', sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('factures', sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('factures', sa.Column('code_statut', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
    op.add_column('factures', sa.Column('mode_generation', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('factures', sa.Column('observations', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('factures', sa.Column('date_echeance', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('factures', sa.Column('numero_facture', sa.VARCHAR(length=100), autoincrement=False, nullable=False))
    op.add_column('factures', sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('factures', sa.Column('valide_par', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_foreign_key('factures_client_id_fkey', 'factures', 'clients', ['client_id'], ['id'])
    op.create_foreign_key('factures_valide_par_fkey', 'factures', 'utilisateurs', ['valide_par'], ['id'])
    op.create_unique_constraint('factures_numero_facture_key', 'factures', ['numero_facture'])
    op.alter_column('factures', 'statut',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='Statut de la facture (payée, impayée, annulée)',
               existing_nullable=False)
    op.alter_column('factures', 'date_emission',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               comment=None,
               existing_comment="Date d'émission de la facture")
    op.alter_column('factures', 'montant_total',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True,
               comment=None,
               existing_comment='Montant total de la facture')
    op.alter_column('factures', 'commande_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               comment=None,
               existing_comment='ID de la commande associée')
    op.add_column('epi', sa.Column('seuil_alerte', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('epi', sa.Column('stock', sa.INTEGER(), autoincrement=False, nullable=True))
    op.alter_column('epi', 'nom',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment="Nom de l'EPI",
               existing_nullable=False)
    op.drop_column('epi', 'categorie')
    op.drop_column('epi', 'description')
    op.add_column('droits_acces', sa.Column('peut_lire', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('droits_acces', sa.Column('module', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('droits_acces', sa.Column('peut_modifier', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('droits_acces', sa.Column('acces_total', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('droits_acces', sa.Column('peut_creer', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('droits_acces', sa.Column('peut_supprimer', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'droits_acces', type_='foreignkey')
    op.drop_column('droits_acces', 'droit_id')
    op.add_column('documents_rh', sa.Column('chemin_fichier', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('documents_rh', sa.Column('date_ajout', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.alter_column('documents_rh', 'type_document',
               existing_type=sa.VARCHAR(length=100),
               nullable=True)
    op.drop_column('documents_rh', 'commentaire')
    op.drop_column('documents_rh', 'fichier')
    op.drop_column('documents_rh', 'date_expiration')
    op.drop_column('documents_rh', 'date_creation')
    op.drop_column('documents_rh', 'nom_document')
    op.add_column('documents_reglementaires', sa.Column('fichier_stocke', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.add_column('documents_reglementaires', sa.Column('titre', sa.VARCHAR(length=150), autoincrement=False, nullable=False))
    op.add_column('documents_reglementaires', sa.Column('date_edition', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('documents_reglementaires', sa.Column('valide_jusquau', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('documents_reglementaires', sa.Column('categorie', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('documents_reglementaires', sa.Column('norme_associee', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('documents_reglementaires', sa.Column('conforme', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('documents_reglementaires', sa.Column('utilisateur_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_foreign_key('documents_reglementaires_utilisateur_id_fkey', 'documents_reglementaires', 'utilisateurs', ['utilisateur_id'], ['id'])
    op.alter_column('documents_reglementaires', 'description',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='Description ou remarques sur le document',
               existing_nullable=True)
    op.alter_column('documents_reglementaires', 'type_document',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='Type de document (ex: certificat, norme, procédure)',
               existing_nullable=False)
    op.drop_column('documents_reglementaires', 'actif')
    op.drop_column('documents_reglementaires', 'date_creation')
    op.drop_column('documents_reglementaires', 'chemin_fichier')
    op.drop_column('documents_reglementaires', 'nom')
    op.add_column('documents_qualite', sa.Column('type_document', sa.VARCHAR(length=100), autoincrement=False, nullable=False))
    op.add_column('documents_qualite', sa.Column('version', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
    op.add_column('documents_qualite', sa.Column('reference_norme', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('documents_qualite', sa.Column('date_ajout', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('documents_qualite', sa.Column('categorie', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('documents_qualite', sa.Column('fichier_path', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.add_column('documents_qualite', sa.Column('actif', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.alter_column('documents_qualite', 'titre',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=150),
               comment=None,
               existing_comment='Titre du document',
               existing_nullable=False)
    op.drop_column('documents_qualite', 'auteur')
    op.drop_column('documents_qualite', 'date_creation')
    op.drop_column('documents_qualite', 'contenu')
    op.add_column('devis', sa.Column('date_devis', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('devis', sa.Column('scenarios', sa.TEXT(), autoincrement=False, nullable=True))
    op.alter_column('devis', 'statut',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               comment=None,
               existing_comment='Statut du devis (brouillon, validé, annulé)')
    op.alter_column('devis', 'montant_total',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True,
               comment=None,
               existing_comment='Montant total du devis')
    op.alter_column('devis', 'client_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               comment=None,
               existing_comment='ID du client associé')
    op.drop_column('devis', 'date_livraison_souhaitee')
    op.drop_column('devis', 'date_creation')
    op.drop_constraint(None, 'controle_robot', type_='foreignkey')
    op.create_foreign_key('controle_robot_robot_id_fkey', 'controle_robot', 'robotique', ['robot_id'], ['id'])
    op.create_index('ix_controle_robot_id', 'controle_robot', ['id'], unique=False)
    op.alter_column('controle_robot', 'date_execution',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               comment=None,
               existing_comment="Date et heure d'exécution de l'action")
    op.alter_column('controle_robot', 'statut',
               existing_type=sa.VARCHAR(),
               comment=None,
               existing_comment="Statut de l'action (ex: réussie, échouée, en cours)",
               existing_nullable=True)
    op.alter_column('controle_robot', 'action',
               existing_type=sa.VARCHAR(),
               comment=None,
               existing_comment='Action effectuée par le robot (ex: soudage, assemblage)',
               existing_nullable=False)
    op.alter_column('controle_robot', 'robot_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='ID du robot contrôlé',
               existing_nullable=False)
    op.drop_column('controle_robot', 'remarque')
    op.drop_constraint(None, 'controle_piece', type_='foreignkey')
    op.drop_constraint(None, 'controle_piece', type_='foreignkey')
    op.create_foreign_key('controle_piece_instrument_id_fkey', 'controle_piece', 'instruments_controle', ['instrument_id'], ['id'])
    op.create_foreign_key('controle_piece_piece_id_fkey', 'controle_piece', 'pieces', ['piece_id'], ['id'])
    op.alter_column('controle_piece', 'remarque',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='Remarques ou observations sur le contrôle',
               existing_nullable=True)
    op.alter_column('controle_piece', 'date_controle',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='Date et heure du contrôle',
               existing_nullable=False)
    op.alter_column('controle_piece', 'resultat',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='Résultat du contrôle (ex: conforme, non conforme)',
               existing_nullable=False)
    op.alter_column('controle_piece', 'instrument_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               comment=None,
               existing_comment="ID de l'instrument utilisé pour le contrôle")
    op.alter_column('controle_piece', 'piece_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='ID de la pièce contrôlée',
               existing_nullable=False)
    op.add_column('commandes', sa.Column('date_commande', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('commandes', sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('commandes', sa.Column('forcer_creation', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('commandes', sa.Column('code_statut', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
    op.add_column('commandes', sa.Column('bon_commande_client', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('commandes', sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'commandes', type_='foreignkey')
    op.alter_column('commandes', 'statut',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               comment=None,
               existing_comment='Statut de la commande (en cours, terminée, annulée)')
    op.alter_column('commandes', 'client_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               comment=None,
               existing_comment='ID du client associé')
    op.drop_column('commandes', 'date_creation')
    op.drop_column('commandes', 'date_validation')
    op.drop_column('commandes', 'devis_id')
    op.alter_column('commande_pieces', 'quantite',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Quantité commandée',
               existing_nullable=False)
    op.alter_column('commande_pieces', 'piece_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='ID de la pièce associée',
               existing_nullable=False)
    op.alter_column('commande_pieces', 'commande_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='ID de la commande associée',
               existing_nullable=False)
    op.drop_column('commande_pieces', 'prix_unitaire')
    op.add_column('audits_qualite', sa.Column('statut', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
    op.add_column('audits_qualite', sa.Column('remarques', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('audits_qualite', sa.Column('responsable', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('audits_qualite', sa.Column('document_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('audits_qualite', sa.Column('date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'audits_qualite', type_='foreignkey')
    op.create_foreign_key('audits_qualite_document_id_fkey', 'audits_qualite', 'documents_qualite', ['document_id'], ['id'])
    op.create_foreign_key('audits_qualite_responsable_fkey', 'audits_qualite', 'utilisateurs', ['responsable'], ['id'])
    op.drop_column('audits_qualite', 'commentaire')
    op.drop_column('audits_qualite', 'resultat')
    op.drop_column('audits_qualite', 'date_audit')
    op.drop_column('audits_qualite', 'responsable_utilisateur_id')
    op.drop_constraint(None, 'analyse_fichiers', type_='foreignkey')
    op.drop_constraint(None, 'analyse_fichiers', type_='foreignkey')
    op.drop_constraint(None, 'analyse_fichiers', type_='foreignkey')
    op.create_index('ix_analyse_fichiers_type_fichier', 'analyse_fichiers', ['type_fichier'], unique=False)
    op.create_index('ix_analyse_fichiers_id', 'analyse_fichiers', ['id'], unique=False)
    op.alter_column('analyse_fichiers', 'contenu',
               existing_type=sa.TEXT(),
               nullable=True,
               comment=None,
               existing_comment="Contenu brut ou résultat de l'analyse du fichier")
    op.alter_column('analyse_fichiers', 'type_fichier',
               existing_type=sa.VARCHAR(),
               nullable=True,
               comment=None,
               existing_comment='Type du fichier analysé (ex: CSV, JSON, XML)')
    op.drop_column('analyse_fichiers', 'programme_id')
    op.drop_column('analyse_fichiers', 'piece_id')
    op.drop_column('analyse_fichiers', 'machine_id')
    op.drop_column('analyse_fichiers', 'date_analyse')
    op.create_table('charges_machine',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('machine_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('gamme_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('date_debut', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('date_fin', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('statut', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('temperature', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('vibration', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['gamme_id'], ['gammes_production.id'], name='charges_machine_gamme_id_fkey'),
    sa.ForeignKeyConstraint(['machine_id'], ['machines.id'], name='charges_machine_machine_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='charges_machine_pkey')
    )
    op.create_table('documents_qhse',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('titre', sa.VARCHAR(length=150), autoincrement=False, nullable=False),
    sa.Column('type_document', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('date_emission', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('date_expiration', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('fichier', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('visible', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('categorie', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='documents_qhse_pkey')
    )
    op.create_table('qr_codes',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('objet_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('objet_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('qr_code_data', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('date_creation', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='qr_codes_pkey'),
    sa.UniqueConstraint('qr_code_data', name='qr_codes_qr_code_data_key')
    )
    op.create_table('lignes_facture',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('facture_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('quantite', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('prix_unitaire', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('total', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['facture_id'], ['factures.id'], name='lignes_facture_facture_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='lignes_facture_pkey')
    )
    op.create_table('stat_finance',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('periode', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('type_stat', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('categorie', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('sous_categorie', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('montant_total', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('source_finance_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('devise', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('precision', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('date_calcul', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['source_finance_id'], ['finance.id'], name='stat_finance_source_finance_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='stat_finance_pkey')
    )
    op.create_table('maintenance',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('machine_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('type_maintenance', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('date_planifiee', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('date_reelle', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('statut', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('operateur_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('remarques', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('planifie_par_ia', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['machine_id'], ['machines.id'], name='maintenance_machine_id_fkey'),
    sa.ForeignKeyConstraint(['operateur_id'], ['utilisateurs.id'], name='maintenance_operateur_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='maintenance_pkey')
    )
    op.create_table('epi_utilisateur',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('utilisateur_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('epi_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('date_distribution', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('quantite', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['epi_id'], ['epi.id'], name='epi_utilisateur_epi_id_fkey'),
    sa.ForeignKeyConstraint(['utilisateur_id'], ['utilisateurs.id'], name='epi_utilisateur_utilisateur_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='epi_utilisateur_pkey')
    )
    op.create_table('qhse',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('type_document', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('remarque', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('conformite', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('instrument_controle_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('epi_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('materiau_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['epi_id'], ['epi.id'], name='qhse_epi_id_fkey'),
    sa.ForeignKeyConstraint(['instrument_controle_id'], ['instruments_controle.id'], name='qhse_instrument_controle_id_fkey'),
    sa.ForeignKeyConstraint(['materiau_id'], ['materiaux.id'], name='qhse_materiau_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='qhse_pkey')
    )
    op.create_table('stat_production',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('periode', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('type_stat', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('valeur', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('unite', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('precision', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('date_calcul', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('machine_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('gamme_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['gamme_id'], ['gammes_production.id'], name='stat_production_gamme_id_fkey'),
    sa.ForeignKeyConstraint(['machine_id'], ['machines.id'], name='stat_production_machine_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='stat_production_pkey')
    )
    op.create_table('planning_employe',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('utilisateur_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('machine_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('plage_horaire', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('tache', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('statut', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('affectation_auto', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['machine_id'], ['machines.id'], name='planning_employe_machine_id_fkey'),
    sa.ForeignKeyConstraint(['utilisateur_id'], ['utilisateurs.id'], name='planning_employe_utilisateur_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='planning_employe_pkey')
    )
    op.create_table('programmes_piece',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('programmes_piece_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('piece_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('nom_programme', sa.VARCHAR(length=150), autoincrement=False, nullable=True),
    sa.Column('fichier_path', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('postprocesseur_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('date_import', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['piece_id'], ['pieces.id'], name='programmes_piece_piece_id_fkey'),
    sa.ForeignKeyConstraint(['postprocesseur_id'], ['postprocesseurs.id'], name='programmes_piece_postprocesseur_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='programmes_piece_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('evaluations_fournisseur',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('fournisseur_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('date_evaluation', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('critere', sa.VARCHAR(length=150), autoincrement=False, nullable=True),
    sa.Column('note', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('commentaire', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['fournisseur_id'], ['fournisseurs.id'], name='evaluations_fournisseur_fournisseur_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='evaluations_fournisseur_pkey')
    )
    op.create_table('affectation_machine',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('utilisateur_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('machine_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('date_affectation', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('tache', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('statut', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['machine_id'], ['machines.id'], name='affectation_machine_machine_id_fkey'),
    sa.ForeignKeyConstraint(['utilisateur_id'], ['utilisateurs.id'], name='affectation_machine_utilisateur_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='affectation_machine_pkey')
    )
    op.create_table('planning_machine',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('machine_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('plage_horaire', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('tache', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('statut', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('charge_estimee', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('gamme_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('optimise_par_ia', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['gamme_id'], ['gammes_production.id'], name='planning_machine_gamme_id_fkey'),
    sa.ForeignKeyConstraint(['machine_id'], ['machines.id'], name='planning_machine_machine_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='planning_machine_pkey')
    )
    op.create_table('historique_actions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('utilisateur_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('date_action', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('module', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('action', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('details', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['utilisateur_id'], ['utilisateurs.id'], name='historique_actions_utilisateur_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='historique_actions_pkey')
    )
    op.create_table('stat_rh',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('periode', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('type_stat', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('utilisateur_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('departement', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('valeur', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('unite', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('precision', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('date_calcul', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['utilisateur_id'], ['utilisateurs.id'], name='stat_rh_utilisateur_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='stat_rh_pkey')
    )
    op.drop_table('ligne_factures')
    op.drop_table('planning_machines')
    op.drop_table('programme_pieces')
    op.drop_index(op.f('ix_production_piece_id'), table_name='production')
    op.drop_table('production')
    op.drop_table('qr_codes_objets')
    op.drop_table('planning_employes')
    op.drop_table('maintenances')
    op.drop_table('evaluations_fournisseurs')
    op.drop_table('epis_utilisateur')
    op.drop_table('affectations_machines')
    op.drop_table('employes')
    op.drop_table('emplacements')
    # ### end Alembic commands ###
